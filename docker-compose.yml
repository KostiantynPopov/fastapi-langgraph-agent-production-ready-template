version: '3.8'

services:
  # Single API service with dynamic environment
  app:
    build:
      context: .
      args:
        APP_ENV: ${APP_ENV}
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    env_file:
      - .env.${APP_ENV}
    environment:
      # Pass sensitive variables at runtime
      - APP_ENV=${APP_ENV}
      # - LLM_API_KEY=${LLM_API_KEY}
      # - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      # - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      # - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10m
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: on-failure
    networks:
      - monitoring
      - common

  postgres:
    image: postgres:15
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10m
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    env_file:
      - .env.${APP_ENV}
    volumes:
      - ./postgres-volume:/var/lib/postgresql/data
    networks:
      - monitoring
      - common

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - monitoring
      - common
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 10m
      timeout: 10s
      retries: 3
      start_period: 10s

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - monitoring
      - common
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 10m
      timeout: 10s
      retries: 3
      start_period: 10s

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring
      - common
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/healthz"]
      interval: 10m
      timeout: 10s
      retries: 3
      start_period: 10s


networks:
  monitoring:
    driver: bridge
  common:
    external: true

volumes:
  grafana-storage: 